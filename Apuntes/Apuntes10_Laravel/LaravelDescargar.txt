-Primero https://laravel.com/
-despues get started
-En creating a laravel project pincha composer
-descarga y ejecuta pinchando en el segundo 
que dice cosas sobre php
resto next
-despues crea la carpeta que quieras
-metete en xammp php
-cambia php.ini y descomenta el zip

-----Si es uno ya creado que te bajas de git-----
-Hacer:
composer install
npm install
-Crea .env en la carpeta series y copia y pega .env.example
-Cambia en .env 
DB_DATABASE=db_series
DB_USERNAME=root
DB_PASSWORD=medac
-Haz php artisan key:generate

-----Si lo acabas de crear-----
-usa el comando de la pagina del laravel
composer create-project laravel/laravel example-app
-en la carpeta que crea el comando metete por cmd
-haz php artisan serve
-se abre el servidor localhost:8000

-----Seguimos con los pasos de manera normal-----
-Para añadir controladores metete en cmd
-php artisan make:controller SerieController
--> se crea en app http controllers


-mete la extension blade, la primera que salga


-php artisan make:controller SerieController --resource
    crea una plantilla en la que trabajar. Es otra opcion al comando de 
    arriba

-hacer php artisan route:list
    enseña la lista de rutas que se han creado


-Creamos el schema en base de datos
-en .env cambiamos DB_DATABASE y DB_PASSWORD

--------OBJETOS SOLO EN SINGULAR---------
-Para crear objetos hacemos php artisan make:Model Serie -m
    Se crean en app models

-En database migrations quitale la fecha a create series
    y añade las columnas de la tabla

-php artisan migrate 
    es para ejecutar el fichero

-php artisan make:seeder SerieSeeder
    precarga la tabla con datos de ejemplo
    metemos valores en el seeder
        DB::table('series')->insert([
            ['titulo'=>"La casa de papel", 'plataforma'=>"Netflix", 'temporadas'=>5],
            ['titulo'=>"Suits", 'plataforma'=>"Amazon Prime", 'temporadas'=>3],
            ['titulo'=>"Como conoci a vuestra madre", 'plataforma'=>"Netflix", 'temporadas'=>10],
            ['titulo'=>"El plan del diablo", 'plataforma'=>"HBO", 'temporadas'=>4]
        ]);

-En SerieSeeder acuerdate de poner use DB;

-En DatabaseSeeder llamamos a SerieSeeder
    $this->call([
        SerieSeeder::class
    ]);

-php artisan db:seed 
    te crea la tabla con los datos del seed y puedes hacer selects ya en workbench

-En el controller para usar la base de datos añade  
    use App\Models\Serie;
    $series = Serie::all();

-Como hemos cambiado a objetos hay que cambiar en el index como llamamos a los valores
    <td>{{ $serie->titulo }}</td>
    <td>{{ $serie->plataforma }}</td>
    <td>{{ $serie->temporadas }}</td>


-SI HUBIESE FALLOS EN LA BASE DE DATOS  
    php artisan migrate:reset borras toda la base de datos
    php artisan migrate La vuelve a crear
    php artisan db:seed La llena de datos

CUIDADO SI HACES VARIOS SEED SIN BORRAR SE TE DUPLICAN LOS DATOS 

---------------------------------------------------Formulario Creacion--------------------------------------------
Cuando creamos formularios hay que poner dentro @csrf
En el controller ponemos en el create un view que te lleve a create.blade.php

en cmd hacemos php artisan route:list
Mirmaos el POST de series y vemos como se llama en este caso series.store 
y ponemos en el action del formulario "{{ route('series.store' )}}"

Despues nos metemos en el controller y en store ponemos
    $serie = new Serie;
    $serie -> titulo = $request -> input('titulo');
    $serie -> plataforma = $request -> input('plataforma');
    $serie -> temporadas = $request -> input('temporadas');
    $serie -> save();

    return redirect('/series');

El save crea el objeto directamente en la base de datos y si queremos redireccionamos a otro lado


Para buscar la serie con un id especifico 
En el controller, en show ponemos
    $serie = Serie::find($id);
    return view('series/show', ['serie'=>$serie]);

Cuando pongamos en la url series/un id se va a lanzar directamente show
Que hemos creado para enseñar el resultado del select con id=id



Si queremos editar la serie en el controller en edit ponemos 
    $serie = Serie::find($id);
    return view('series/edit', ['serie'=>$serie]);

ej de url series/3/edit

Despues copiamos el formulario de create.blade.php y lo pegamos en edit.blade.php
Con la diferencia que hay que poner {{ method_field('PUT') }} en el formulario 
porque solo se accede a traves de PUT pero html no deja poner PUT solo POST y GET
Y en el action ponemos {{route('series.update', ['series' => $serie -> id]) }}
ATENCION EL PRIMER VALOR EN LOS [] ES LO QUE PONE EN EL ROUTE:LIST, EN SERIES ES SERIES Y EN TEMPORADAS ES TEMPORADA

Tambien para que se vea el valor antiguo lo ponemos en value en cada input para editar 
    mas facilmente

Para el update habria que hacer 
    $serie = Serie::find($id);
    $serie -> titulo = $request -> input('titulo');
    $serie -> plataforma = $request -> input('plataforma');
    $serie -> temporadas = $request -> input('temporadas');
    $serie -> save();

    return redirect('/series');

Si quieres añadir un boton en index para ver un dato concreto abrimos un formulario por dato asi 
    <form action="{{ route('series.show', ['series' => $serie -> id]) }}" method="GET">
            <input type="submit" value="Ver">
    </form>


Para eliminar un dato tenemos que poner {{ method_field('DELETE') }} en el formulario que llama a destroy
Despues en el controller en destroy hacemos
    DB::table('series')->where('id', "=", $id)->delete();
    return redirect('/series');


En nuestro caso el nombre de la serie es foreign key en temporadas
Cuando hay una relacion y hay que poner claves foraneas hay que poner en el N del 1-N
unsignedBigInteger('serie_id');
$table -> foreign('serie_id')->references('id')->on('series');

Ahora que hemos cambiado el nombre de la serie en temporada por id cambiamos en el seeder los nombres por los ids

ATENCION en database seeder tiene que estar primero el 1 y despues el N

Despues de haber cambiado lo necesario reseteamos las migraciones con
    php artisan migrate:reset borras toda la base de datos
    php artisan migrate La vuelve a crear
    php artisan db:seed La llena de datos



en app models Serie añadimos para decir que es relacion 1-N porque una serie tiene varias temporadas
public function temporadas()
    {
        return $this->hasMany(Temporada::class);
    }

y en serie hay que hacer el doble sentido poniendo 
public function serie() 
    {
        return $this->BelongsTo(Serie::class);
    }


podemos llamar al titulo de la serie desde objetos con
    $temporada->serie->titulo


Si queremos hacer que al ver cada serie se vean sus temporadas
entonces en el show de series